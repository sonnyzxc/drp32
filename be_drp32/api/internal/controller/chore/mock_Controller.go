// Code generated by mockery v2.43.2. DO NOT EDIT.

package chore

import (
	context "context"

	model "github.com/sonnyzxc/drp/be_drp32/api/internal/controller/model"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	null "github.com/volatiletech/null/v8"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

// CompleteChore provides a mock function with given fields: ctx, choreID, userID, file, fileHandler, present
func (_m *MockController) CompleteChore(ctx context.Context, choreID int64, userID int64, file multipart.File, fileHandler *multipart.FileHeader, present bool) (model.Chores, error) {
	ret := _m.Called(ctx, choreID, userID, file, fileHandler, present)

	if len(ret) == 0 {
		panic("no return value specified for CompleteChore")
	}

	var r0 model.Chores
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, multipart.File, *multipart.FileHeader, bool) (model.Chores, error)); ok {
		return rf(ctx, choreID, userID, file, fileHandler, present)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, multipart.File, *multipart.FileHeader, bool) model.Chores); ok {
		r0 = rf(ctx, choreID, userID, file, fileHandler, present)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Chores)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, multipart.File, *multipart.FileHeader, bool) error); ok {
		r1 = rf(ctx, choreID, userID, file, fileHandler, present)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChore provides a mock function with given fields: ctx, desc, emoji, points, assignedTo, dueDate, recurring
func (_m *MockController) CreateChore(ctx context.Context, desc string, emoji string, points int, assignedTo null.Int64, dueDate null.Time, recurring int) (model.Chore, error) {
	ret := _m.Called(ctx, desc, emoji, points, assignedTo, dueDate, recurring)

	if len(ret) == 0 {
		panic("no return value specified for CreateChore")
	}

	var r0 model.Chore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, null.Int64, null.Time, int) (model.Chore, error)); ok {
		return rf(ctx, desc, emoji, points, assignedTo, dueDate, recurring)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, null.Int64, null.Time, int) model.Chore); ok {
		r0 = rf(ctx, desc, emoji, points, assignedTo, dueDate, recurring)
	} else {
		r0 = ret.Get(0).(model.Chore)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, null.Int64, null.Time, int) error); ok {
		r1 = rf(ctx, desc, emoji, points, assignedTo, dueDate, recurring)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChoreByID provides a mock function with given fields: ctx, choreID
func (_m *MockController) DeleteChoreByID(ctx context.Context, choreID int64) error {
	ret := _m.Called(ctx, choreID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChoreByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, choreID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChores provides a mock function with given fields: ctx, familyID, completed, assignedTo
func (_m *MockController) GetChores(ctx context.Context, familyID int64, completed int, assignedTo int64) (model.Chores, error) {
	ret := _m.Called(ctx, familyID, completed, assignedTo)

	if len(ret) == 0 {
		panic("no return value specified for GetChores")
	}

	var r0 model.Chores
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int64) (model.Chores, error)); ok {
		return rf(ctx, familyID, completed, assignedTo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int64) model.Chores); ok {
		r0 = rf(ctx, familyID, completed, assignedTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Chores)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int64) error); ok {
		r1 = rf(ctx, familyID, completed, assignedTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncompleteChore provides a mock function with given fields: ctx, choreID
func (_m *MockController) IncompleteChore(ctx context.Context, choreID int64) (model.Chore, error) {
	ret := _m.Called(ctx, choreID)

	if len(ret) == 0 {
		panic("no return value specified for IncompleteChore")
	}

	var r0 model.Chore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Chore, error)); ok {
		return rf(ctx, choreID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Chore); ok {
		r0 = rf(ctx, choreID)
	} else {
		r0 = ret.Get(0).(model.Chore)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, choreID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
